#platform "uLCD-90DT"


// Program Skeleton 1.4 generated 27-Apr-22 12:47:24

#inherit "4DGL_16bitColours.fnc"
#inherit "ledDigitsDisplay.inc"

#inherit "VisualConst.inc"

// var gradientRAM[29+xxx*2] := [-1,-1,-9999,0,0,xxx] ;  // uncomment and replace xxx with maximum of all inherent 'media' widgets

#inherit "microbots-screenConst.inc"

func split(var value, var *ten, var *one)
    *ten := value / 10;
    *one := value % 10;
endfunc

func show_time(var *handles, var minutes, var seconds)
    var m_ten, m_one;
    var s_ten, s_one;
    split(minutes, &m_ten, &m_one);
    split(seconds, &s_ten, &s_one);
    ledDigitsDisplay(m_ten, handles[0], 214, 1, 1, 81, 0) ;
    ledDigitsDisplay(m_one, handles[1], 295, 1, 1, 81, 0) ;
    ledDigitsDisplay(s_ten, handles[2], 424, 1, 1, 81, 0) ;
    ledDigitsDisplay(s_one, handles[3], 505, 1, 1, 81, 0) ;
endfunc

func get_time(var *m, var *s)
    /* get timer value */
    var t[2];
    t[0] := sys_T_HI();
    t[1] := sys_T();

    /* divide by 1000 to get seconds */
    var b[2] := [0, 1000];
    var raw_seconds[2];
    udiv_3232(raw_seconds, t, b);

    txt_MoveCursor(0, 0);
    putnum(DEC, t[0]); putch(' ');

    /* divide by 60 to get minutes */
    b[1] := 60;
    var m_buf[2];
    udiv_3232(m_buf, raw_seconds, b);
    *m := m_buf[1];

    /* subtract 60m from raw_seconds to get seconds */
    umul_1616(b, *m, 60);
    var s_buf[2];
    usub_3232(s_buf, raw_seconds, b);
    *s := s_buf[1];
endfunc

func main()
//  Uncomment the following if uSD and uSD based GCI images, fonts or strings used.

//  var hstrings ; // Handle to access uSD strings, uncomment if required
//  var hFontx ;   // Handle to access uSD fonts, uncomment if required and change n to font number
    putstr("Mounting...\n");
    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(200);
            gfx_Cls();
            pause(200);
        wend
    endif
//    gfx_TransparentColour(0x0020);    // uncomment if transparency required, please understand why and when you need to use this
//    gfx_Transparency(ON);             // uncomment if transparency required, as generally there is a performance hit when using it

//  hFontn := file_LoadImageControl("MICROB~1.dan", "MICROB~1.gcn", 1); // Open handle to access uSD fonts, uncomment if required and change n to font number dropping a and c if > 9
//  hstrings := file_Open("MICROB~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
    hndl := file_LoadImageControl("MICROB~1.dat", "MICROB~1.gci", 1);


//  Uncomment the following if Flash and Flash based GCF images, fonts or strings used.
/*
//    if SPI0 (Traditional uSD SPI port) Used
//    spi_Init(SPI_FAST, 0 or xSPI_ADDRESS_MODE4x );  // use SPI_ADDRESS_MODE4 if Flash memory is >16MB
//    if SPI1 (other SPI pins) Used
//    pin_HI(EnablePin) ;                   // EnablePin is PA pin connected to SPI_CS
//    pin_Set(PIN_OUT,EnablePin) ;          // EnablePin is PA pin connected to SPI_CS
//    SPI1_SCK_pin(FlashSCK?<) ;            // FlashSCK is PA pin connected to SPI_SCK
//    SPI1_SDI_pin(FlashSDI?<) ;            // FlashSDI is PA pin connected to SPI_SDI
//    SPI1_SDO_pin(FlashSDO?<) ;            // FlashSDO is PA pin connected to SPI_SDO
//    SPI1_Init(SPI_SPEED15, SPI8_MODE_5  x+ SPI_ADDRESS_MODE4x, EnablePin) ; // add SPI_ADDRESS_MODE4 if Flash memory is >16MB, EnablePin is USD_ENABLE or PA?
    spiflash_SetAdd(SPI0, 0, 0);
    hndl := spiflash_LoadGCFImageControl(SPIx, EnablePin);    // SPIx is SPI0 or SPI1, as appropriate, EnablePin is USD_ENABLE or PA?
*/

    gfx_Set(SCREEN_MODE,LANDSCAPE) ;


    // BackgroundGradient 1.0 generated 27-Apr-22 12:54:17
    img_Show(hndl,iBackgroundGradient) ;

    img_Show(hndl, iminute1);  // show all digits at 0, only do this once
    img_Show(hndl, iminute2);  // show all digits at 0, only do this once
    img_Show(hndl, isecond1);  // show all digits at 0, only do this once
    img_Show(hndl, isecond2);  // show all digits at 0, only do this once
    var timeHandles[4] := [iiminute1, iiminute2, iisecond1, iisecond2];

    var minutes := 0;
    var seconds := 0;

    repeat
        show_time(timeHandles, minutes, seconds);
        get_time(&minutes, &seconds);
    forever
endfunc

